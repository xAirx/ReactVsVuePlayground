/* Setup React Query and Axios
React Query

Install React Query module:

    Using npm:

    $ npm install react-query

    Using yarn:

    $ yarn add react-query

Let’s create new QueryClient to interact with a cache.

Open index.js, wrap App component with QueryClientProvider component which connects and provides QueryClient object to our application.

src/index.js */

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';


import { QueryClient, QueryClientProvider } from "react-query";
const queryClient = new QueryClient();

ReactDOM.render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </React.StrictMode>,
  document.getElementById('root')
);

/*
From official Document Important Defaults section, React Query will consider cached data as stale. Stale queries are re-fetched automatically in the background when:

    New instances of the query mount
    The window is refocused
    The network is reconnected
    The query is optionally configured with a refetch interval.

You can turn off most of the defaults by passing defaultOptions as config parameter. For example:
 */
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      refetchOnmount: false,
      refetchOnReconnect: false,
      retry: false,
      staleTime: 5*60*1000,
    },
  },
});

    refetchOnWindowFocus: automatically requests fresh data in the background if user leaves the app and returns to stale data.
    refetchOnmount: if true, refetch on mount if the data is stale.
    refetchOnReconnect: if true, refetch on reconnect if the data is stale.
    retry: if true, failed queries will retry infinitely.
    staleTime: the time in milliseconds after data is considered stale. Defaults to 0.

/* Axios

Install axios module:

    Using npm:

    $ npm install axios@0.22.0

    Using yarn:

    $ yarn add axios@0.22.0

We can create a new instance of axios using axios.create(config) method, then export it as an apiClient:

src/http-common.js */

import axios from "axios";

export default axios.create({
  baseURL: "http://localhost:8080/api",
  headers: {
    "Content-type": "application/json"
  }
});

/* In src/App.js
 */

import apiClient from "./http-common";

/*
Now we can use apiClient to send HTTP requests and receive responses.

The response for a Axios request contains:

    data: parsed response body provided by the server
    status: HTTP status code
    statusText: HTTP status message
    headers: HTTP headers (lower case)
    config: the request config that was provided to axios
    request: the last client request instance that generated this response

For more details about Axios (with instance creation, params, json, body, headers, error handling…), kindly visit:
Axios Tutorial: Get/Post/Put/Delete request example */